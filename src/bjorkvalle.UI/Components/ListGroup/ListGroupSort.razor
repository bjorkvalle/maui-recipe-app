@namespace bjorkvalle.UI.Components
@inherits UIComponentBase
@typeparam TItem

@if (!NoRender)
{
    <Button AdditionalAttributes="AdditionalAttributes" Size="Size.Small" Clicked="(() => Sort(Field))" IsOutline="IsButtonOutline" Color="Color" IsDisabled="IsDisabled">
        @ChildContent
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 @IsAscendingClass @IsActiveClass">
            <path fill-rule="evenodd" d="M10 5a.75.75 0 01.75.75v6.638l1.96-2.158a.75.75 0 111.08 1.04l-3.25 3.5a.75.75 0 01-1.08 0l-3.25-3.5a.75.75 0 111.08-1.04l1.96 2.158V5.75A.75.75 0 0110 5z" clip-rule="evenodd" />
        </svg>
        @*else
        {
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="opacity-75 ml-1 w-4 h-4">
                <path fill-rule="evenodd" d="M2.24 6.8a.75.75 0 001.06-.04l1.95-2.1v8.59a.75.75 0 001.5 0V4.66l1.95 2.1a.75.75 0 101.1-1.02l-3.25-3.5a.75.75 0 00-1.1 0L2.2 5.74a.75.75 0 00.04 1.06zm8 6.4a.75.75 0 00-.04 1.06l3.25 3.5a.75.75 0 001.1 0l3.25-3.5a.75.75 0 10-1.1-1.02l-1.95 2.1V6.75a.75.75 0 00-1.5 0v8.59l-1.95-2.1a.75.75 0 00-1.06-.04z" clip-rule="evenodd" />
            </svg>
        }*@
    </Button>
}

@code {
    [EditorRequired, CascadingParameter] ListGroup<TItem> ListGroup { get; set; }
    [EditorRequired, Parameter] public string Field { get; set; }
    [EditorRequired, Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool IsDisabled { get; set; }

    protected override void OnInitialized()
    {
        if (ListGroup == null)
            throw new ArgumentNullException(nameof(ListGroup), $"{nameof(ListGroupSort<TItem>)} must exist within a (${nameof(ListGroup)})");
    }

    private async Task Sort(string field)
    {
        if (ListGroup.IsSortByEvent)
            await ListGroup.OnSortChanged.InvokeAsync(field);
        else
            ListGroup.SortTable(Field);
    }

    public bool IsActive => Field == ListGroup.CurrentSortColumn;
    public string IsAscendingClass => IsActive && !ListGroup.IsSortedAscending ? null : "transform rotate-180";
    public string IsActiveClass => !IsActive ? "opacity-25" : null;

    public bool IsButtonOutline => !IsActive;
    public Color Color => !IsActive
        ? Color.None
        : Color.None;
    //: ButtonColor.Secondary;
}