@namespace bjorkvalle.UI.Components
@inherits UIComponentBase

@if (!NoRender)
{
    <li @attributes="AdditionalAttributes" class="@ClassNames" @onfocusin="OnFocusIn" @onfocusout="OnFocusOut"
        role="list" tabindex="0" disabled="@IsDisabled" @onclick="Select" @onkeyup="KeySelect">
        <a>

        @ChildContent
        </a>
    </li>
}

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    //[Parameter] public Size Size { get; set; }
    //[Parameter] public Color Color { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsActive { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnSelect { get; set; }

    private bool isFocused;

    protected override void OnParametersSet()
    {
        //classBuilder
        //    .Begin("list-group-item")
        //    .AddClass("list-group-item-", ClassProvider.SizeClass(Size), !Size.Equals(Size.Default))
        //    .AddClass("list-group-item-", ClassProvider.ColorClass(Color), !Color.Equals(Color.None))
        //    .AddClass("active", condition: IsActive)
        //    ;
    }


    private async Task Select(MouseEventArgs e)
    {
        if (OnSelect.HasDelegate)
            await OnSelect.InvokeAsync(e);
    }

    private async Task KeySelect(KeyboardEventArgs e)
    {
        if (isFocused && (e.Code == "Space" || e.Code == "Enter"))
            await Select(null);
    }

    private void OnFocusIn() => isFocused = true;
    private void OnFocusOut() => isFocused = false;
}