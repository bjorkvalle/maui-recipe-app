@namespace bjorkvalle.UI.Components
@inherits UIComponentBase
@using System.Text;

@if (!NoRender)
{
    <div @onclick="Close"
         hidden="@isHiddenMenu"
         class="fixed start-0 top-0 w-full h-full"
         style="z-index:999;"></div>

    <div @attributes="AdditionalAttributes" class="@ClassNames">
        <CascadingValue Value="this">
            @if (ToggleContent != null)
            {
                @ToggleContent
            }
            @if (MenuContent != null && !isHiddenMenu)
            {
                <div class="@MenuClass">
                    @MenuContent
                </div>
            }
        </CascadingValue>
    </div>
}

@code {
    [Parameter]
    public RenderFragment ToggleContent { get; set; }

    [Parameter]
    public RenderFragment MenuContent { get; set; }

    /// <summary>
    /// All elements are the maximum width of the dropdown menu. Default is false
    /// </summary>
    [Parameter]
    public bool IsMaximised { get; set; }

    [Parameter]
    public Align MenuAlignment { get; set; }

    /// <summary>
    /// Top or bottom. Default is bottom
    /// </summary>
    [Parameter]
    public HorizontalAlign HorizontalAlign { get; set; }

    private bool isHiddenMenu = true;

    public bool IsOpen => !isHiddenMenu;

    public void Toggle() => isHiddenMenu = !isHiddenMenu;

    public void Close() => isHiddenMenu = true;

    protected override void OnParametersSet()
    {
        classBuilder
            .Begin("dropdown")
            .AddClass("w-full", condition: IsMaximised)
            ;
    }

    private string MenuClass => new StringBuilder("dropdown-menu absolute z-10000")
        //.AppendIf(!isHiddenFilterMenu, " show")
        .AppendIf(IsMaximised, " w-full")
        .AppendIf(MenuAlignment.Equals(Align.Left), " left-0")
        .AppendIf(MenuAlignment.Equals(Align.Right), " right-0")
        .AppendIf(HorizontalAlign.Equals(HorizontalAlign.Top), " bottom-full")
        .ToString();
}