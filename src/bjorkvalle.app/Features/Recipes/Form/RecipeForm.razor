@namespace bjorkvalle.app.Features.Recipes
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager

<EditForm Model="model" class="flex flex-wrap gap-2 fade-out">
    <Field class="w-full">
        <LabelFor For="(() => model.Title)" IsRequired />
        <TextEdit @bind-Value="model.Title"></TextEdit>
        <ValidationMessage For="(() => model.Title)" />
    </Field>
    <Field class="w-full">
        <LabelFor For="(() => model.CoverImg)" IsRequired />
        <TextEdit ValueChanged="OnCoverSelect"
                  ValueExpression="@(() => model.CoverSrc)"
                  Value="@model.CoverSrc"
                  Placeholder="https://"></TextEdit>
        <ValidationMessage For="(() => model.CoverImg)" />
    </Field>
    @if (!string.IsNullOrEmpty(model.CoverImg))
    {
        <img src="@model.CoverImg" class="max-h-80" />
    }
    <Field class="w-full">
        <LabelFor For="(() => model.Source)" IsRequired />
        <TextEdit @bind-Value="model.Source" Placeholder="https://"></TextEdit>
        <ValidationMessage For="(() => model.Source)" />
    </Field>
    <Field class="w-full">
        <LabelFor For="(() => model.Html)" IsRequired />
        <RichTextEditor class="bg-white" @bind-Delta="model.Delta" @bind-Html="model.Html" />
        <ValidationMessage For="(() => model.Html)" />
    </Field>

    <Button Color="Color.Primary" Clicked="Save">Save</Button>
</EditForm>

<Alert Type="AlertTypes.Error" NoRender="string.IsNullOrEmpty(error)">@error</Alert>

@code {
    /// <summary>
    /// When updating
    /// </summary>
    [Parameter]
    public Guid? Id { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    private CreateFormModel model = new();
    private string error;
    private byte[] coverImg;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var dto = await RecipeService.GetById(Id.Value);
            model = new CreateFormModel
                {
                    Title = dto.Title,
                    Delta = dto.Delta,
                    Html = dto.Html,
                    CoverImg = dto.CoverImg,
                    CoverSrc = dto.CoverSrc,
                    Source = dto.Source,
                };
        }
    }

    private async Task OnCoverSelect(string url)
    {
        error = string.Empty;
        model.CoverImg = string.Empty;
        model.CoverSrc = url;

        if (Uri.TryCreate(url, UriKind.Absolute, out Uri resultUri))
        {
            // The Uri.TryCreate method returns true if the URL is valid
            // and stores the parsed Uri in the resultUri variable.
            using (var httpClient = new HttpClient())
            {
                try
                {
                    var imgByteArray = await httpClient.GetByteArrayAsync(resultUri);
                    var base64String = "data:image/jpeg;base64," + Convert.ToBase64String(imgByteArray);
                    model.CoverImg = base64String;
                }
                catch (Exception ex)
                {
                    model.CoverImg = "no image";
                    await Toast.Make(ex.Message, ToastDuration.Long).Show(default);
                }
            }
        }
    }

    private async Task Save()
    {
        error = string.Empty;

        try
        {
            //todo move to pages?

            var dto = new RecipeDto
                {
                    Id = Id.HasValue ? Id.Value : Guid.Empty,
                    Title = model.Title,
                    Html = model.Html,
                    Delta = model.Delta,
                    CoverImg = model.CoverImg,
                    CoverSrc = model.CoverSrc,
                    Source = model.Source,
                };

            if (Id.HasValue)
            {
                await RecipeService.Update(dto);
                NavigationManager.NavigateTo($"recipes/{dto.Id}");
            }
            else
            {
                var id = await RecipeService.Create(dto);
                NavigationManager.NavigateTo($"recipes/{id}");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}